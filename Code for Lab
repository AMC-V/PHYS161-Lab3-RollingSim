# region User inputs
mass = float(input("Enter a mass: "))  # kg
angle = radians(float(input("Enter an angle: ")))  # In Radians
ramp_length = 10
shape_constant = 2/5
# endregion

# region Coordinate axis
line_x = cylinder(pos=vec(-5, 0, 0), axis=vec(10, 0, 0), radius=0.05, color=vec(1, 0, 0))
x_axis_label = text(text='x', pos=line_x.pos + line_x.axis, color=vec(1, 0, 0))

line_y = cylinder(pos=vec(0, -5, 0), axis=vec(0, 10, 0), radius=0.05, color=vec(0, 1, 0))
y_axis_label = text(text="y", pos=line_y.pos + line_y.axis, color=vec(0, 1, 0))

line_z = cylinder(pos=vec(0, 0, -5), axis=vec(0, 0, 10), radius=0.05, color=vec(0, 0, 1))
z_axis_label = text(text="z", pos=line_z.pos + line_z.axis, color=vec(0, 0, 1))
# endregion

# region Making objects
ground = box(pos=vec(0, -.5, 0), length=10, height=1, width=10, texture=textures.gravel)
Incline = box(pos=vec(0, 0, 0), length=ramp_length, height=1, width=1, texture=textures.wood)
Incline.rotate(origin=vec(-5, 0, 0), axis=vec(0, 0, 1), angle=angle)

object1 = sphere(pos=vec(Incline.pos.x + Incline.length / 2 * 3 / 4, Incline.pos.y + Incline.height
                 * sin(angle), Incline.pos.z), radius=1, texture=textures.metal)
object1.pos = object1.pos + vec(0, object1.radius, 0)

object1.rotate(origin=vec(-0.5, object1.radius + Incline.height, 0), axis=vec(0, 0, 1), angle=angle)

object1.m = mass  # kg
# endregion

# region Constant
g = 9.81
pivot_axis = vec(0, 0, 1)
# endregion

# region Calculations
object1.alpha = (g * sin(angle)) / (object1.radius * (shape_constant + 1)) * pivot_axis  # Alpha in the pos z axis

object1.aTan = g * sin(angle) / (shape_constant + 1)  # magnitude of aTan, down the inclined axis

object1.a = object1.aTan * vec(-cos(angle), -sin(angle), 0)  # We break it apart back to normal axis
# endregion

# region Updated in loop + object's position
object1.omega = 0 * pivot_axis  # Initialized
object1.rotate(angle=angle, axis=vec(0, 0, 1), origin=object1.pos)  # which axis's the object should rotate around
object1.v = vec(0, 0, 0)
# endregion

# region Loop
t = 0.00  # Time for program to run
dt = .01  # Time step
sim_speed = .1
tracker = 0
distance_traveled = 0

while distance_traveled < ramp_length:
    rate(sim_speed / dt)

    object1.omega += object1.alpha * dt   # print(f"Box Omega {object1.omega}")
    object1.v += object1.a * dt  # print(f"velocity {object1.v}")
    object1.pos += object1.v * dt

    distance_traveled += object1.v.mag * dt

    dTheta = object1.omega.mag * dt  # The delta angle the object should rotate
    object1.rotate(angle=dTheta, axis=pivot_axis, origin=object1.pos)  # make object rotate that amount

#    if tracker != 1:
#        time.sleep(1)
#        tracker = 1

    t += dt
# endregion

print(f"box {object1.v.mag}")
